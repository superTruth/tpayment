package applepay

import (
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"os"
	"testing"
)

var demoTokenRsa = `
{
	"version": "RSA_v1",
	"data": "N6h9l7hs9bUn1DGfc9MEEhP9/COm5AVsIuzKSXMcG85P7FkR058VuQnYRCY+EiTx3Kde7EUfrCnHWeGurDEB5v5au0Omo8uLyKAMsFeEJYntgLw8Wnhf98UlrlT06UwqI16Y+iNu62EE1Uz2ydZJfyrBT7OpuCdK5LH2FIEsjElZrMh7NDofOz4vSErya/llAFSceZCJr09zVwBpz86AYspmXtnk098bF+93Dnw3bWH4X5L2FujP5OnGO4mKW5RxMDudm+t6tFKbHfESGJufAevFU5LSNGIYCunDxF7EAw/yDFUlLJBrEYL2ZSRPaV/SQ7WXvYqhg6WNm/ZMgJCW4apQ+JuqULMYTksxKQS6x/z5vdslk4803ByeeEOxEQK0QZ8o0QeOELnOJuNs",
	"signature": "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",
	"header": {
		"publicKeyHash": "ZDKQxFk0hs8YTl0dWrj2FevQOZH8aaUP8ezlvO7yt5g=",
		"transactionId": "82e309ac4cfac5b573980485a7bee36cff63806f669bc50b71bacb2f208f2bf6",
		"wrappedKey": "s9UOpf2p7XWfqQ8iW26YboR16HXOh9x1Spdb/D3XkUHXbg7zoOJg8m2hPmu0ygJR156wjj/VdJo23D+fs4CgvpWEz4ElpgSGjPo+Fjk1qNFEogDFB4QJH7ZHTU1F/KxDh43Uu2Ms0IfSxFYYBJeohxH3XRit+PmzdzMpnYcl6u0ikozgEcepFhzIeNKIhjMRRE5xh40pPRlAOJeFUVBrnI55h9KXG4cZIeg0aBon0SFTo7aiIhNdSxZgEEZEnrR9bC8dJK4RoFbfNmvOHz9jTPE4EbbIL0dRP8TlOtrnA7gXf240zY0MxoNSE9mjDe1CFpSiseKgG1keZNN3cmhNpw=="
	}
}
`

const pubKeyFilePath = "/Users/truth/project/tpayment/pkg/paymentmethod/decodecardnum/applepay/cer/apple_pay.cer"
const privateFilePath = "/Users/truth/project/tpayment/pkg/paymentmethod/decodecardnum/applepay/cer/www.fang.com.key"

func TestDecodeApplePayRsa(t *testing.T) {
	priKeyFile, _ := os.Open(privateFilePath)
	priKeyBytes, _ := ioutil.ReadAll(priKeyFile)

	_, err := DecodeApplePay(demoTokenRsa, &ConfigKey{
		PrivateKey: string(priKeyBytes),
	})
	if err != nil {
		t.Error("DecodeApplePay fail->", err.Error())
		return
	}
}

var demoTokenEcc = `{
  "version": "EC_v1",
  "data": "o+Trfkbx5KSa1he3d7Php5dJcI3Xd5Gfin5AIlxRerZX87SljFSp5D9zPysTmFJTqlJLT9MhL/bqKYuGGKuMH0o4qAz0nvbJdxsGWiJY6p0hCLw6CionfYySbByBspQT4yrUEfmJw4jJKQxWVQR3PSJ9ih74/YA5GjbNIP+hTqHfJLLYe8dUUU9aW07CVh1uHNL2KL648RNw/Wpyu19m9AaHLdafZ36QTUI4c2Wm+HCW7TrO8BfFODeT2ERoD6x0vYQTBRZMssI2pJU9mGq0OXejhIRj/VUsMD0E5vhxrBAQQDsuJyFk6v7Jh9MUBhrAnz/T21RFGaRMpVwqtVsgNWvzudP+Do3oo9qn+ybtfYmL4k2Al2R8UV7QomgRy+WEnAMGcf4aDCk0eogT",
  "signature": "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",
  "header": {
    "ephemeralPublicKey": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaVgmDzzR5ptE5dXo5bVVDvkDCKwY8AzpVa0uucBYyyAFtomShReya5Bxlw4YqaKCwsoYYemodWALAcpfTiLW4g==",
    "publicKeyHash": "hSOgmFqaj9c7kuyBcxeEnzlBWaqSOtNNUKu9mgAXq00=",
    "transactionId": "e8695d7139a0095bb9b402699e9376bf32d3348521cda8c9294e859861243d3b"
  }
}`

const eccPukFilePath = "/Users/truth/project/tpayment/pkg/paymentmethod/decodecardnum/applepay/cer/apple_pay_ecc.crt"
const eccPrivateFilePath = "/Users/truth/project/tpayment/pkg/paymentmethod/decodecardnum/applepay/cer/ecc.key"

func TestDecodeApplePayEcc(t *testing.T) {
	pukFile, _ := os.Open(eccPukFilePath)
	pukBytes, _ := ioutil.ReadAll(pukFile)

	priKeyFile, _ := os.Open(eccPrivateFilePath)
	priKeyBytes, _ := ioutil.ReadAll(priKeyFile)

	_, err := DecodeApplePay(demoTokenEcc, &ConfigKey{
		PrivateKey: string(priKeyBytes),
		PublicKey:  string(pukBytes),
	})
	if err != nil {
		t.Error("DecodeApplePay fail->", err.Error())
		return
	}
}

func TestPukHash(t *testing.T) {
	f, _ := os.Open(eccPukFilePath)
	pukBlock, _ := ioutil.ReadAll(f)

	ret, err := CalcCerHash(pukBlock)
	if err != nil {
		t.Error("CalcCerHash fail->", err.Error())
		return
	}

	fmt.Println("hash->", ret)
}

const sessionPukFilePath = "/Users/truth/project/tpayment/pkg/paymentmethod/decodecardnum/applepay/cer/tls_rsa.crt"
const sessionPrivateFilePath = "/Users/truth/project/tpayment/pkg/paymentmethod/decodecardnum/applepay/cer/www.fang.com.key"

func TestApplePaySession(t *testing.T) {
	pukFile, _ := os.Open(sessionPukFilePath)
	pukBytes, _ := ioutil.ReadAll(pukFile)

	priKeyFile, _ := os.Open(sessionPrivateFilePath)
	priKeyBytes, _ := ioutil.ReadAll(priKeyFile)

	_, err := tls.X509KeyPair(pukBytes, priKeyBytes)
	fmt.Println("LoadX509KeyPair->", err == nil)

	responseMsg, err := CreateSession(&SessionRequestBean{
		EndPointUrl:        "https://cn-apple-pay-gateway.apple.com/paymentservices/paymentSession",
		MerchantIdentifier: "merchant.fang.test",
		DisplayName:        "Fang",
		Initiative:         "web",
		InitiativeContext:  "www.paymentstg.horizonpay.cn",
	}, &ConfigKey{
		TlsPublicKey:  string(pukBytes),
		TlsPrivateKey: string(priKeyBytes),
	})

	if err != nil {
		t.Error("create session fail->", err.Error())
		return
	}

	fmt.Println("session message->", responseMsg)
}
